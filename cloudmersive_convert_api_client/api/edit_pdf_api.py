# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudmersive_convert_api_client.api_client import ApiClient


class EditPdfApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edit_pdf_encrypt(self, input_file, **kwargs):  # noqa: E501
        """Encrypt and password-protect a PDF  # noqa: E501

        Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_encrypt(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :param str user_password: Password of a user (reader) of the PDF file
        :param str owner_password: Password of a owner (creator/editor) of the PDF file
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_encrypt_with_http_info(input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_encrypt_with_http_info(input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_encrypt_with_http_info(self, input_file, **kwargs):  # noqa: E501
        """Encrypt and password-protect a PDF  # noqa: E501

        Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_encrypt_with_http_info(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :param str user_password: Password of a user (reader) of the PDF file
        :param str owner_password: Password of a owner (creator/editor) of the PDF file
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input_file', 'user_password', 'owner_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_encrypt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_encrypt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'user_password' in params:
            header_params['userPassword'] = params['user_password']  # noqa: E501
        if 'owner_password' in params:
            header_params['ownerPassword'] = params['owner_password']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/encrypt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_get_form_fields(self, input_file, **kwargs):  # noqa: E501
        """Gets PDF Form fields and values  # noqa: E501

        Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_get_form_fields(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: PdfFormFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_get_form_fields_with_http_info(input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_get_form_fields_with_http_info(input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_get_form_fields_with_http_info(self, input_file, **kwargs):  # noqa: E501
        """Gets PDF Form fields and values  # noqa: E501

        Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_get_form_fields_with_http_info(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: PdfFormFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_get_form_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_get_form_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/form/get-fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PdfFormFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_get_metadata(self, input_file, **kwargs):  # noqa: E501
        """Get PDF document metadata  # noqa: E501

        Returns the metadata from the PDF document, including Title, Author, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_get_metadata(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: PdfMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_get_metadata_with_http_info(input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_get_metadata_with_http_info(input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_get_metadata_with_http_info(self, input_file, **kwargs):  # noqa: E501
        """Get PDF document metadata  # noqa: E501

        Returns the metadata from the PDF document, including Title, Author, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_get_metadata_with_http_info(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: PdfMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_get_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/get-metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PdfMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_rasterize(self, input_file, **kwargs):  # noqa: E501
        """Rasterize a PDF to an image-based PDF  # noqa: E501

        Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_rasterize(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_rasterize_with_http_info(input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_rasterize_with_http_info(input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_rasterize_with_http_info(self, input_file, **kwargs):  # noqa: E501
        """Rasterize a PDF to an image-based PDF  # noqa: E501

        Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_rasterize_with_http_info(input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file input_file: Input file to perform the operation on. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_rasterize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_rasterize`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/rasterize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_set_form_fields(self, field_values, **kwargs):  # noqa: E501
        """Sets ands fills PDF Form field values  # noqa: E501

        Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_form_fields(field_values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPdfFormFieldsRequest field_values: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_set_form_fields_with_http_info(field_values, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_set_form_fields_with_http_info(field_values, **kwargs)  # noqa: E501
            return data

    def edit_pdf_set_form_fields_with_http_info(self, field_values, **kwargs):  # noqa: E501
        """Sets ands fills PDF Form field values  # noqa: E501

        Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_form_fields_with_http_info(field_values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPdfFormFieldsRequest field_values: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_set_form_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_values' is set
        if ('field_values' not in params or
                params['field_values'] is None):
            raise ValueError("Missing the required parameter `field_values` when calling `edit_pdf_set_form_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'field_values' in params:
            body_params = params['field_values']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/form/set-fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_set_metadata(self, request, **kwargs):  # noqa: E501
        """Sets PDF document metadata  # noqa: E501

        Sets (writes) metadata into the input PDF document, including Title, Author, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_metadata(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPdfMetadataRequest request: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_set_metadata_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_set_metadata_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def edit_pdf_set_metadata_with_http_info(self, request, **kwargs):  # noqa: E501
        """Sets PDF document metadata  # noqa: E501

        Sets (writes) metadata into the input PDF document, including Title, Author, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_metadata_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPdfMetadataRequest request: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_set_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `edit_pdf_set_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/set-metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_set_permissions(self, owner_password, input_file, **kwargs):  # noqa: E501
        """Encrypt, password-protect and set restricted permissions on a PDF  # noqa: E501

        Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_permissions(owner_password, input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_password: Password of a owner (creator/editor) of the PDF file (required) (required)
        :param file input_file: Input file to perform the operation on. (required)
        :param str user_password: Password of a user (reader) of the PDF file (optional)
        :param bool allow_printing: Set to false to disable printing through DRM.  Default is true.
        :param bool allow_document_assembly: Set to false to disable document assembly through DRM.  Default is true.
        :param bool allow_content_extraction: Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true.
        :param bool allow_form_filling: Set to false to disable filling out form fields in the PDF through DRM.  Default is true.
        :param bool allow_editing: Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true.
        :param bool allow_annotations: Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true.
        :param bool allow_degraded_printing: Set to false to disable degraded printing of the PDF through DRM.  Default is true.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_set_permissions_with_http_info(owner_password, input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_set_permissions_with_http_info(owner_password, input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_set_permissions_with_http_info(self, owner_password, input_file, **kwargs):  # noqa: E501
        """Encrypt, password-protect and set restricted permissions on a PDF  # noqa: E501

        Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_set_permissions_with_http_info(owner_password, input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_password: Password of a owner (creator/editor) of the PDF file (required) (required)
        :param file input_file: Input file to perform the operation on. (required)
        :param str user_password: Password of a user (reader) of the PDF file (optional)
        :param bool allow_printing: Set to false to disable printing through DRM.  Default is true.
        :param bool allow_document_assembly: Set to false to disable document assembly through DRM.  Default is true.
        :param bool allow_content_extraction: Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true.
        :param bool allow_form_filling: Set to false to disable filling out form fields in the PDF through DRM.  Default is true.
        :param bool allow_editing: Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true.
        :param bool allow_annotations: Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true.
        :param bool allow_degraded_printing: Set to false to disable degraded printing of the PDF through DRM.  Default is true.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_password', 'input_file', 'user_password', 'allow_printing', 'allow_document_assembly', 'allow_content_extraction', 'allow_form_filling', 'allow_editing', 'allow_annotations', 'allow_degraded_printing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_set_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_password' is set
        if ('owner_password' not in params or
                params['owner_password'] is None):
            raise ValueError("Missing the required parameter `owner_password` when calling `edit_pdf_set_permissions`")  # noqa: E501
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_set_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'owner_password' in params:
            header_params['ownerPassword'] = params['owner_password']  # noqa: E501
        if 'user_password' in params:
            header_params['userPassword'] = params['user_password']  # noqa: E501
        if 'allow_printing' in params:
            header_params['allowPrinting'] = params['allow_printing']  # noqa: E501
        if 'allow_document_assembly' in params:
            header_params['allowDocumentAssembly'] = params['allow_document_assembly']  # noqa: E501
        if 'allow_content_extraction' in params:
            header_params['allowContentExtraction'] = params['allow_content_extraction']  # noqa: E501
        if 'allow_form_filling' in params:
            header_params['allowFormFilling'] = params['allow_form_filling']  # noqa: E501
        if 'allow_editing' in params:
            header_params['allowEditing'] = params['allow_editing']  # noqa: E501
        if 'allow_annotations' in params:
            header_params['allowAnnotations'] = params['allow_annotations']  # noqa: E501
        if 'allow_degraded_printing' in params:
            header_params['allowDegradedPrinting'] = params['allow_degraded_printing']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/encrypt/set-permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_pdf_watermark_text(self, watermark_text, input_file, **kwargs):  # noqa: E501
        """Add a text watermark to a PDF  # noqa: E501

        Adds a text watermark to a PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_watermark_text(watermark_text, input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str watermark_text: Watermark text to add to the PDF (required) (required)
        :param file input_file: Input file to perform the operation on. (required)
        :param str font_name: Font Family Name for the watermark text; default is Times New Roman
        :param float font_size: Font Size in points of the text; default is 150
        :param str font_color: Font color in hexadecimal or HTML color name; default is Red
        :param float font_transparency: Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_pdf_watermark_text_with_http_info(watermark_text, input_file, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_pdf_watermark_text_with_http_info(watermark_text, input_file, **kwargs)  # noqa: E501
            return data

    def edit_pdf_watermark_text_with_http_info(self, watermark_text, input_file, **kwargs):  # noqa: E501
        """Add a text watermark to a PDF  # noqa: E501

        Adds a text watermark to a PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_pdf_watermark_text_with_http_info(watermark_text, input_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str watermark_text: Watermark text to add to the PDF (required) (required)
        :param file input_file: Input file to perform the operation on. (required)
        :param str font_name: Font Family Name for the watermark text; default is Times New Roman
        :param float font_size: Font Size in points of the text; default is 150
        :param str font_color: Font color in hexadecimal or HTML color name; default is Red
        :param float font_transparency: Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['watermark_text', 'input_file', 'font_name', 'font_size', 'font_color', 'font_transparency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_pdf_watermark_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'watermark_text' is set
        if ('watermark_text' not in params or
                params['watermark_text'] is None):
            raise ValueError("Missing the required parameter `watermark_text` when calling `edit_pdf_watermark_text`")  # noqa: E501
        # verify the required parameter 'input_file' is set
        if ('input_file' not in params or
                params['input_file'] is None):
            raise ValueError("Missing the required parameter `input_file` when calling `edit_pdf_watermark_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'watermark_text' in params:
            header_params['watermarkText'] = params['watermark_text']  # noqa: E501
        if 'font_name' in params:
            header_params['fontName'] = params['font_name']  # noqa: E501
        if 'font_size' in params:
            header_params['fontSize'] = params['font_size']  # noqa: E501
        if 'font_color' in params:
            header_params['fontColor'] = params['font_color']  # noqa: E501
        if 'font_transparency' in params:
            header_params['fontTransparency'] = params['font_transparency']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'input_file' in params:
            local_var_files['inputFile'] = params['input_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/convert/edit/pdf/watermark/text', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
