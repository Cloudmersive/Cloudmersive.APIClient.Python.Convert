# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocxComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'author': 'str',
        'author_initials': 'str',
        'comment_text': 'str',
        'comment_date': 'datetime',
        'is_top_level': 'bool',
        'is_reply': 'bool',
        'parent_comment_path': 'str',
        'done': 'bool'
    }

    attribute_map = {
        'path': 'Path',
        'author': 'Author',
        'author_initials': 'AuthorInitials',
        'comment_text': 'CommentText',
        'comment_date': 'CommentDate',
        'is_top_level': 'IsTopLevel',
        'is_reply': 'IsReply',
        'parent_comment_path': 'ParentCommentPath',
        'done': 'Done'
    }

    def __init__(self, path=None, author=None, author_initials=None, comment_text=None, comment_date=None, is_top_level=None, is_reply=None, parent_comment_path=None, done=None):  # noqa: E501
        """DocxComment - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._author = None
        self._author_initials = None
        self._comment_text = None
        self._comment_date = None
        self._is_top_level = None
        self._is_reply = None
        self._parent_comment_path = None
        self._done = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if author is not None:
            self.author = author
        if author_initials is not None:
            self.author_initials = author_initials
        if comment_text is not None:
            self.comment_text = comment_text
        if comment_date is not None:
            self.comment_date = comment_date
        if is_top_level is not None:
            self.is_top_level = is_top_level
        if is_reply is not None:
            self.is_reply = is_reply
        if parent_comment_path is not None:
            self.parent_comment_path = parent_comment_path
        if done is not None:
            self.done = done

    @property
    def path(self):
        """Gets the path of this DocxComment.  # noqa: E501

        Path to the comment in the document  # noqa: E501

        :return: The path of this DocxComment.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DocxComment.

        Path to the comment in the document  # noqa: E501

        :param path: The path of this DocxComment.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def author(self):
        """Gets the author of this DocxComment.  # noqa: E501

        Author name of the comment  # noqa: E501

        :return: The author of this DocxComment.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this DocxComment.

        Author name of the comment  # noqa: E501

        :param author: The author of this DocxComment.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def author_initials(self):
        """Gets the author_initials of this DocxComment.  # noqa: E501

        Initials of the author of the comment  # noqa: E501

        :return: The author_initials of this DocxComment.  # noqa: E501
        :rtype: str
        """
        return self._author_initials

    @author_initials.setter
    def author_initials(self, author_initials):
        """Sets the author_initials of this DocxComment.

        Initials of the author of the comment  # noqa: E501

        :param author_initials: The author_initials of this DocxComment.  # noqa: E501
        :type: str
        """

        self._author_initials = author_initials

    @property
    def comment_text(self):
        """Gets the comment_text of this DocxComment.  # noqa: E501

        Text content of the comment  # noqa: E501

        :return: The comment_text of this DocxComment.  # noqa: E501
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this DocxComment.

        Text content of the comment  # noqa: E501

        :param comment_text: The comment_text of this DocxComment.  # noqa: E501
        :type: str
        """

        self._comment_text = comment_text

    @property
    def comment_date(self):
        """Gets the comment_date of this DocxComment.  # noqa: E501

        Date timestamp of the comment  # noqa: E501

        :return: The comment_date of this DocxComment.  # noqa: E501
        :rtype: datetime
        """
        return self._comment_date

    @comment_date.setter
    def comment_date(self, comment_date):
        """Sets the comment_date of this DocxComment.

        Date timestamp of the comment  # noqa: E501

        :param comment_date: The comment_date of this DocxComment.  # noqa: E501
        :type: datetime
        """

        self._comment_date = comment_date

    @property
    def is_top_level(self):
        """Gets the is_top_level of this DocxComment.  # noqa: E501

        True if the comment is at the top level, false if this comment is a child reply of another comment  # noqa: E501

        :return: The is_top_level of this DocxComment.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this DocxComment.

        True if the comment is at the top level, false if this comment is a child reply of another comment  # noqa: E501

        :param is_top_level: The is_top_level of this DocxComment.  # noqa: E501
        :type: bool
        """

        self._is_top_level = is_top_level

    @property
    def is_reply(self):
        """Gets the is_reply of this DocxComment.  # noqa: E501

        True if this comment is a reply to another comment, false otherwise  # noqa: E501

        :return: The is_reply of this DocxComment.  # noqa: E501
        :rtype: bool
        """
        return self._is_reply

    @is_reply.setter
    def is_reply(self, is_reply):
        """Sets the is_reply of this DocxComment.

        True if this comment is a reply to another comment, false otherwise  # noqa: E501

        :param is_reply: The is_reply of this DocxComment.  # noqa: E501
        :type: bool
        """

        self._is_reply = is_reply

    @property
    def parent_comment_path(self):
        """Gets the parent_comment_path of this DocxComment.  # noqa: E501

        Path to the parent of this comment, if this comment is a reply, otherwise this value will be null  # noqa: E501

        :return: The parent_comment_path of this DocxComment.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_path

    @parent_comment_path.setter
    def parent_comment_path(self, parent_comment_path):
        """Sets the parent_comment_path of this DocxComment.

        Path to the parent of this comment, if this comment is a reply, otherwise this value will be null  # noqa: E501

        :param parent_comment_path: The parent_comment_path of this DocxComment.  # noqa: E501
        :type: str
        """

        self._parent_comment_path = parent_comment_path

    @property
    def done(self):
        """Gets the done of this DocxComment.  # noqa: E501

        True if this comment is marked as Done in Word, otherwise it is false  # noqa: E501

        :return: The done of this DocxComment.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this DocxComment.

        True if this comment is marked as Done in Word, otherwise it is false  # noqa: E501

        :param done: The done of this DocxComment.  # noqa: E501
        :type: bool
        """

        self._done = done

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocxComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocxComment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
