# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocxMetadataCustomProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'property_data_type': 'str',
        'string_value': 'str',
        'integer_value': 'int',
        'double_value': 'float',
        'date_value': 'datetime'
    }

    attribute_map = {
        'property_name': 'PropertyName',
        'property_data_type': 'PropertyDataType',
        'string_value': 'StringValue',
        'integer_value': 'IntegerValue',
        'double_value': 'DoubleValue',
        'date_value': 'DateValue'
    }

    def __init__(self, property_name=None, property_data_type=None, string_value=None, integer_value=None, double_value=None, date_value=None):  # noqa: E501
        """DocxMetadataCustomProperty - a model defined in Swagger"""  # noqa: E501

        self._property_name = None
        self._property_data_type = None
        self._string_value = None
        self._integer_value = None
        self._double_value = None
        self._date_value = None
        self.discriminator = None

        if property_name is not None:
            self.property_name = property_name
        if property_data_type is not None:
            self.property_data_type = property_data_type
        if string_value is not None:
            self.string_value = string_value
        if integer_value is not None:
            self.integer_value = integer_value
        if double_value is not None:
            self.double_value = double_value
        if date_value is not None:
            self.date_value = date_value

    @property
    def property_name(self):
        """Gets the property_name of this DocxMetadataCustomProperty.  # noqa: E501

        Name of the property  # noqa: E501

        :return: The property_name of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this DocxMetadataCustomProperty.

        Name of the property  # noqa: E501

        :param property_name: The property_name of this DocxMetadataCustomProperty.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def property_data_type(self):
        """Gets the property_data_type of this DocxMetadataCustomProperty.  # noqa: E501

        Data type of the property; possible values are \"string\", \"integer\", \"double\" or \"date\"  # noqa: E501

        :return: The property_data_type of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_data_type

    @property_data_type.setter
    def property_data_type(self, property_data_type):
        """Sets the property_data_type of this DocxMetadataCustomProperty.

        Data type of the property; possible values are \"string\", \"integer\", \"double\" or \"date\"  # noqa: E501

        :param property_data_type: The property_data_type of this DocxMetadataCustomProperty.  # noqa: E501
        :type: str
        """

        self._property_data_type = property_data_type

    @property
    def string_value(self):
        """Gets the string_value of this DocxMetadataCustomProperty.  # noqa: E501

        If the property is of a string data type, then provides the string value if available  # noqa: E501

        :return: The string_value of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this DocxMetadataCustomProperty.

        If the property is of a string data type, then provides the string value if available  # noqa: E501

        :param string_value: The string_value of this DocxMetadataCustomProperty.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    @property
    def integer_value(self):
        """Gets the integer_value of this DocxMetadataCustomProperty.  # noqa: E501

        If the property is of a integer data type, then provides the integer value if available  # noqa: E501

        :return: The integer_value of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: int
        """
        return self._integer_value

    @integer_value.setter
    def integer_value(self, integer_value):
        """Sets the integer_value of this DocxMetadataCustomProperty.

        If the property is of a integer data type, then provides the integer value if available  # noqa: E501

        :param integer_value: The integer_value of this DocxMetadataCustomProperty.  # noqa: E501
        :type: int
        """

        self._integer_value = integer_value

    @property
    def double_value(self):
        """Gets the double_value of this DocxMetadataCustomProperty.  # noqa: E501

        If the property is of a double floating point data type, then provides the double value if available  # noqa: E501

        :return: The double_value of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this DocxMetadataCustomProperty.

        If the property is of a double floating point data type, then provides the double value if available  # noqa: E501

        :param double_value: The double_value of this DocxMetadataCustomProperty.  # noqa: E501
        :type: float
        """

        self._double_value = double_value

    @property
    def date_value(self):
        """Gets the date_value of this DocxMetadataCustomProperty.  # noqa: E501

        If the property is of a date time data type, then provides the date time value if available  # noqa: E501

        :return: The date_value of this DocxMetadataCustomProperty.  # noqa: E501
        :rtype: datetime
        """
        return self._date_value

    @date_value.setter
    def date_value(self, date_value):
        """Sets the date_value of this DocxMetadataCustomProperty.

        If the property is of a date time data type, then provides the date time value if available  # noqa: E501

        :param date_value: The date_value of this DocxMetadataCustomProperty.  # noqa: E501
        :type: datetime
        """

        self._date_value = date_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocxMetadataCustomProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocxMetadataCustomProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
