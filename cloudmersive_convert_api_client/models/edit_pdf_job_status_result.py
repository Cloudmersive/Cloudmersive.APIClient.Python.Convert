# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EditPdfJobStatusResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'async_job_status': 'str',
        'async_job_id': 'str',
        'output_file_result': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'async_job_status': 'AsyncJobStatus',
        'async_job_id': 'AsyncJobID',
        'output_file_result': 'OutputFileResult',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, successful=None, async_job_status=None, async_job_id=None, output_file_result=None, error_message=None):  # noqa: E501
        """EditPdfJobStatusResult - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._async_job_status = None
        self._async_job_id = None
        self._output_file_result = None
        self._error_message = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if async_job_status is not None:
            self.async_job_status = async_job_status
        if async_job_id is not None:
            self.async_job_id = async_job_id
        if output_file_result is not None:
            self.output_file_result = output_file_result
        if error_message is not None:
            self.error_message = error_message

    @property
    def successful(self):
        """Gets the successful of this EditPdfJobStatusResult.  # noqa: E501

        Tru eif the operation to check the status of the job was successful, false otherwise  # noqa: E501

        :return: The successful of this EditPdfJobStatusResult.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this EditPdfJobStatusResult.

        Tru eif the operation to check the status of the job was successful, false otherwise  # noqa: E501

        :param successful: The successful of this EditPdfJobStatusResult.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def async_job_status(self):
        """Gets the async_job_status of this EditPdfJobStatusResult.  # noqa: E501

        Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED  # noqa: E501

        :return: The async_job_status of this EditPdfJobStatusResult.  # noqa: E501
        :rtype: str
        """
        return self._async_job_status

    @async_job_status.setter
    def async_job_status(self, async_job_status):
        """Sets the async_job_status of this EditPdfJobStatusResult.

        Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED  # noqa: E501

        :param async_job_status: The async_job_status of this EditPdfJobStatusResult.  # noqa: E501
        :type: str
        """

        self._async_job_status = async_job_status

    @property
    def async_job_id(self):
        """Gets the async_job_id of this EditPdfJobStatusResult.  # noqa: E501

        When the job exceeds 25 pages, an Async Job ID is returned.  Use the CheckPdfOcrJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes  # noqa: E501

        :return: The async_job_id of this EditPdfJobStatusResult.  # noqa: E501
        :rtype: str
        """
        return self._async_job_id

    @async_job_id.setter
    def async_job_id(self, async_job_id):
        """Sets the async_job_id of this EditPdfJobStatusResult.

        When the job exceeds 25 pages, an Async Job ID is returned.  Use the CheckPdfOcrJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes  # noqa: E501

        :param async_job_id: The async_job_id of this EditPdfJobStatusResult.  # noqa: E501
        :type: str
        """

        self._async_job_id = async_job_id

    @property
    def output_file_result(self):
        """Gets the output_file_result of this EditPdfJobStatusResult.  # noqa: E501

        Output file result (if applicable)  # noqa: E501

        :return: The output_file_result of this EditPdfJobStatusResult.  # noqa: E501
        :rtype: str
        """
        return self._output_file_result

    @output_file_result.setter
    def output_file_result(self, output_file_result):
        """Sets the output_file_result of this EditPdfJobStatusResult.

        Output file result (if applicable)  # noqa: E501

        :param output_file_result: The output_file_result of this EditPdfJobStatusResult.  # noqa: E501
        :type: str
        """
        if output_file_result is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', output_file_result):  # noqa: E501
            raise ValueError(r"Invalid value for `output_file_result`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._output_file_result = output_file_result

    @property
    def error_message(self):
        """Gets the error_message of this EditPdfJobStatusResult.  # noqa: E501

        Error message (if any)  # noqa: E501

        :return: The error_message of this EditPdfJobStatusResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this EditPdfJobStatusResult.

        Error message (if any)  # noqa: E501

        :param error_message: The error_message of this EditPdfJobStatusResult.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditPdfJobStatusResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditPdfJobStatusResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
