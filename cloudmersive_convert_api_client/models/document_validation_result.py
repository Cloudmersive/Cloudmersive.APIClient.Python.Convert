# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_is_valid': 'bool',
        'password_protected': 'bool',
        'error_count': 'int',
        'warning_count': 'int',
        'errors_and_warnings': 'list[DocumentValidationError]'
    }

    attribute_map = {
        'document_is_valid': 'DocumentIsValid',
        'password_protected': 'PasswordProtected',
        'error_count': 'ErrorCount',
        'warning_count': 'WarningCount',
        'errors_and_warnings': 'ErrorsAndWarnings'
    }

    def __init__(self, document_is_valid=None, password_protected=None, error_count=None, warning_count=None, errors_and_warnings=None):  # noqa: E501
        """DocumentValidationResult - a model defined in Swagger"""  # noqa: E501

        self._document_is_valid = None
        self._password_protected = None
        self._error_count = None
        self._warning_count = None
        self._errors_and_warnings = None
        self.discriminator = None

        if document_is_valid is not None:
            self.document_is_valid = document_is_valid
        if password_protected is not None:
            self.password_protected = password_protected
        if error_count is not None:
            self.error_count = error_count
        if warning_count is not None:
            self.warning_count = warning_count
        if errors_and_warnings is not None:
            self.errors_and_warnings = errors_and_warnings

    @property
    def document_is_valid(self):
        """Gets the document_is_valid of this DocumentValidationResult.  # noqa: E501

        True if the document is valid and has no errors, false otherwise  # noqa: E501

        :return: The document_is_valid of this DocumentValidationResult.  # noqa: E501
        :rtype: bool
        """
        return self._document_is_valid

    @document_is_valid.setter
    def document_is_valid(self, document_is_valid):
        """Sets the document_is_valid of this DocumentValidationResult.

        True if the document is valid and has no errors, false otherwise  # noqa: E501

        :param document_is_valid: The document_is_valid of this DocumentValidationResult.  # noqa: E501
        :type: bool
        """

        self._document_is_valid = document_is_valid

    @property
    def password_protected(self):
        """Gets the password_protected of this DocumentValidationResult.  # noqa: E501

        True if the document is password protected, false otherwise  # noqa: E501

        :return: The password_protected of this DocumentValidationResult.  # noqa: E501
        :rtype: bool
        """
        return self._password_protected

    @password_protected.setter
    def password_protected(self, password_protected):
        """Sets the password_protected of this DocumentValidationResult.

        True if the document is password protected, false otherwise  # noqa: E501

        :param password_protected: The password_protected of this DocumentValidationResult.  # noqa: E501
        :type: bool
        """

        self._password_protected = password_protected

    @property
    def error_count(self):
        """Gets the error_count of this DocumentValidationResult.  # noqa: E501

        Number of validation errors found in the document  # noqa: E501

        :return: The error_count of this DocumentValidationResult.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this DocumentValidationResult.

        Number of validation errors found in the document  # noqa: E501

        :param error_count: The error_count of this DocumentValidationResult.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def warning_count(self):
        """Gets the warning_count of this DocumentValidationResult.  # noqa: E501

        Number of validation warnings found in the document  # noqa: E501

        :return: The warning_count of this DocumentValidationResult.  # noqa: E501
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this DocumentValidationResult.

        Number of validation warnings found in the document  # noqa: E501

        :param warning_count: The warning_count of this DocumentValidationResult.  # noqa: E501
        :type: int
        """

        self._warning_count = warning_count

    @property
    def errors_and_warnings(self):
        """Gets the errors_and_warnings of this DocumentValidationResult.  # noqa: E501

        Details of errors and warnings found  # noqa: E501

        :return: The errors_and_warnings of this DocumentValidationResult.  # noqa: E501
        :rtype: list[DocumentValidationError]
        """
        return self._errors_and_warnings

    @errors_and_warnings.setter
    def errors_and_warnings(self, errors_and_warnings):
        """Sets the errors_and_warnings of this DocumentValidationResult.

        Details of errors and warnings found  # noqa: E501

        :param errors_and_warnings: The errors_and_warnings of this DocumentValidationResult.  # noqa: E501
        :type: list[DocumentValidationError]
        """

        self._errors_and_warnings = errors_and_warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentValidationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
