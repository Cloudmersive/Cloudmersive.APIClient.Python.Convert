# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocxTableRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_index': 'int',
        'path': 'str',
        'row_cells': 'list[DocxTableCell]'
    }

    attribute_map = {
        'row_index': 'RowIndex',
        'path': 'Path',
        'row_cells': 'RowCells'
    }

    def __init__(self, row_index=None, path=None, row_cells=None):  # noqa: E501
        """DocxTableRow - a model defined in Swagger"""  # noqa: E501

        self._row_index = None
        self._path = None
        self._row_cells = None
        self.discriminator = None

        if row_index is not None:
            self.row_index = row_index
        if path is not None:
            self.path = path
        if row_cells is not None:
            self.row_cells = row_cells

    @property
    def row_index(self):
        """Gets the row_index of this DocxTableRow.  # noqa: E501

        Index of the row, 0-based  # noqa: E501

        :return: The row_index of this DocxTableRow.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this DocxTableRow.

        Index of the row, 0-based  # noqa: E501

        :param row_index: The row_index of this DocxTableRow.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def path(self):
        """Gets the path of this DocxTableRow.  # noqa: E501

        The Path of the location of this table row object; leave blank for new tables  # noqa: E501

        :return: The path of this DocxTableRow.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DocxTableRow.

        The Path of the location of this table row object; leave blank for new tables  # noqa: E501

        :param path: The path of this DocxTableRow.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def row_cells(self):
        """Gets the row_cells of this DocxTableRow.  # noqa: E501

        Cells in the row; this is where the contents of the row is stored  # noqa: E501

        :return: The row_cells of this DocxTableRow.  # noqa: E501
        :rtype: list[DocxTableCell]
        """
        return self._row_cells

    @row_cells.setter
    def row_cells(self, row_cells):
        """Sets the row_cells of this DocxTableRow.

        Cells in the row; this is where the contents of the row is stored  # noqa: E501

        :param row_cells: The row_cells of this DocxTableRow.  # noqa: E501
        :type: list[DocxTableCell]
        """

        self._row_cells = row_cells

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocxTableRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocxTableRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
