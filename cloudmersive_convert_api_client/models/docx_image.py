# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocxImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'image_name': 'str',
        'image_id': 'int',
        'image_description': 'str',
        'image_width': 'int',
        'image_height': 'int',
        'x_offset': 'int',
        'y_offset': 'int',
        'image_data_embed_id': 'str',
        'image_data_content_type': 'str',
        'image_internal_file_name': 'str',
        'image_contents_url': 'str',
        'inline_with_text': 'bool'
    }

    attribute_map = {
        'path': 'Path',
        'image_name': 'ImageName',
        'image_id': 'ImageId',
        'image_description': 'ImageDescription',
        'image_width': 'ImageWidth',
        'image_height': 'ImageHeight',
        'x_offset': 'XOffset',
        'y_offset': 'YOffset',
        'image_data_embed_id': 'ImageDataEmbedId',
        'image_data_content_type': 'ImageDataContentType',
        'image_internal_file_name': 'ImageInternalFileName',
        'image_contents_url': 'ImageContentsURL',
        'inline_with_text': 'InlineWithText'
    }

    def __init__(self, path=None, image_name=None, image_id=None, image_description=None, image_width=None, image_height=None, x_offset=None, y_offset=None, image_data_embed_id=None, image_data_content_type=None, image_internal_file_name=None, image_contents_url=None, inline_with_text=None):  # noqa: E501
        """DocxImage - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._image_name = None
        self._image_id = None
        self._image_description = None
        self._image_width = None
        self._image_height = None
        self._x_offset = None
        self._y_offset = None
        self._image_data_embed_id = None
        self._image_data_content_type = None
        self._image_internal_file_name = None
        self._image_contents_url = None
        self._inline_with_text = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if image_name is not None:
            self.image_name = image_name
        if image_id is not None:
            self.image_id = image_id
        if image_description is not None:
            self.image_description = image_description
        if image_width is not None:
            self.image_width = image_width
        if image_height is not None:
            self.image_height = image_height
        if x_offset is not None:
            self.x_offset = x_offset
        if y_offset is not None:
            self.y_offset = y_offset
        if image_data_embed_id is not None:
            self.image_data_embed_id = image_data_embed_id
        if image_data_content_type is not None:
            self.image_data_content_type = image_data_content_type
        if image_internal_file_name is not None:
            self.image_internal_file_name = image_internal_file_name
        if image_contents_url is not None:
            self.image_contents_url = image_contents_url
        if inline_with_text is not None:
            self.inline_with_text = inline_with_text

    @property
    def path(self):
        """Gets the path of this DocxImage.  # noqa: E501

        The Path of the location of this object; leave blank for new tables  # noqa: E501

        :return: The path of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DocxImage.

        The Path of the location of this object; leave blank for new tables  # noqa: E501

        :param path: The path of this DocxImage.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def image_name(self):
        """Gets the image_name of this DocxImage.  # noqa: E501

        The Name of the image  # noqa: E501

        :return: The image_name of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this DocxImage.

        The Name of the image  # noqa: E501

        :param image_name: The image_name of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def image_id(self):
        """Gets the image_id of this DocxImage.  # noqa: E501

        The Id of the image  # noqa: E501

        :return: The image_id of this DocxImage.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this DocxImage.

        The Id of the image  # noqa: E501

        :param image_id: The image_id of this DocxImage.  # noqa: E501
        :type: int
        """

        self._image_id = image_id

    @property
    def image_description(self):
        """Gets the image_description of this DocxImage.  # noqa: E501

        The Description of the image  # noqa: E501

        :return: The image_description of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_description

    @image_description.setter
    def image_description(self, image_description):
        """Sets the image_description of this DocxImage.

        The Description of the image  # noqa: E501

        :param image_description: The image_description of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_description = image_description

    @property
    def image_width(self):
        """Gets the image_width of this DocxImage.  # noqa: E501

        Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height  # noqa: E501

        :return: The image_width of this DocxImage.  # noqa: E501
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this DocxImage.

        Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height  # noqa: E501

        :param image_width: The image_width of this DocxImage.  # noqa: E501
        :type: int
        """

        self._image_width = image_width

    @property
    def image_height(self):
        """Gets the image_height of this DocxImage.  # noqa: E501

        Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height  # noqa: E501

        :return: The image_height of this DocxImage.  # noqa: E501
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this DocxImage.

        Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height  # noqa: E501

        :param image_height: The image_height of this DocxImage.  # noqa: E501
        :type: int
        """

        self._image_height = image_height

    @property
    def x_offset(self):
        """Gets the x_offset of this DocxImage.  # noqa: E501

        X (horizontal) offset of the image  # noqa: E501

        :return: The x_offset of this DocxImage.  # noqa: E501
        :rtype: int
        """
        return self._x_offset

    @x_offset.setter
    def x_offset(self, x_offset):
        """Sets the x_offset of this DocxImage.

        X (horizontal) offset of the image  # noqa: E501

        :param x_offset: The x_offset of this DocxImage.  # noqa: E501
        :type: int
        """

        self._x_offset = x_offset

    @property
    def y_offset(self):
        """Gets the y_offset of this DocxImage.  # noqa: E501

        Y (vertical) offset of the image  # noqa: E501

        :return: The y_offset of this DocxImage.  # noqa: E501
        :rtype: int
        """
        return self._y_offset

    @y_offset.setter
    def y_offset(self, y_offset):
        """Sets the y_offset of this DocxImage.

        Y (vertical) offset of the image  # noqa: E501

        :param y_offset: The y_offset of this DocxImage.  # noqa: E501
        :type: int
        """

        self._y_offset = y_offset

    @property
    def image_data_embed_id(self):
        """Gets the image_data_embed_id of this DocxImage.  # noqa: E501

        Read-only; internal ID for the image contents  # noqa: E501

        :return: The image_data_embed_id of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_data_embed_id

    @image_data_embed_id.setter
    def image_data_embed_id(self, image_data_embed_id):
        """Sets the image_data_embed_id of this DocxImage.

        Read-only; internal ID for the image contents  # noqa: E501

        :param image_data_embed_id: The image_data_embed_id of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_data_embed_id = image_data_embed_id

    @property
    def image_data_content_type(self):
        """Gets the image_data_content_type of this DocxImage.  # noqa: E501

        Read-only; image data MIME content-type  # noqa: E501

        :return: The image_data_content_type of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_data_content_type

    @image_data_content_type.setter
    def image_data_content_type(self, image_data_content_type):
        """Sets the image_data_content_type of this DocxImage.

        Read-only; image data MIME content-type  # noqa: E501

        :param image_data_content_type: The image_data_content_type of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_data_content_type = image_data_content_type

    @property
    def image_internal_file_name(self):
        """Gets the image_internal_file_name of this DocxImage.  # noqa: E501

        Read-only; internal file name/path for the image  # noqa: E501

        :return: The image_internal_file_name of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_internal_file_name

    @image_internal_file_name.setter
    def image_internal_file_name(self, image_internal_file_name):
        """Sets the image_internal_file_name of this DocxImage.

        Read-only; internal file name/path for the image  # noqa: E501

        :param image_internal_file_name: The image_internal_file_name of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_internal_file_name = image_internal_file_name

    @property
    def image_contents_url(self):
        """Gets the image_contents_url of this DocxImage.  # noqa: E501

        URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.  # noqa: E501

        :return: The image_contents_url of this DocxImage.  # noqa: E501
        :rtype: str
        """
        return self._image_contents_url

    @image_contents_url.setter
    def image_contents_url(self, image_contents_url):
        """Sets the image_contents_url of this DocxImage.

        URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.  # noqa: E501

        :param image_contents_url: The image_contents_url of this DocxImage.  # noqa: E501
        :type: str
        """

        self._image_contents_url = image_contents_url

    @property
    def inline_with_text(self):
        """Gets the inline_with_text of this DocxImage.  # noqa: E501

        True if the image is inline with the text; false if it is floating  # noqa: E501

        :return: The inline_with_text of this DocxImage.  # noqa: E501
        :rtype: bool
        """
        return self._inline_with_text

    @inline_with_text.setter
    def inline_with_text(self, inline_with_text):
        """Sets the inline_with_text of this DocxImage.

        True if the image is inline with the text; false if it is floating  # noqa: E501

        :param inline_with_text: The inline_with_text of this DocxImage.  # noqa: E501
        :type: bool
        """

        self._inline_with_text = inline_with_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocxImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocxImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
