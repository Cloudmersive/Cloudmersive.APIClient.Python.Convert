# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XlsxSpreadsheetCell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'text_value': 'str',
        'cell_identifier': 'str',
        'style_index': 'int',
        'formula': 'str'
    }

    attribute_map = {
        'path': 'Path',
        'text_value': 'TextValue',
        'cell_identifier': 'CellIdentifier',
        'style_index': 'StyleIndex',
        'formula': 'Formula'
    }

    def __init__(self, path=None, text_value=None, cell_identifier=None, style_index=None, formula=None):  # noqa: E501
        """XlsxSpreadsheetCell - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._text_value = None
        self._cell_identifier = None
        self._style_index = None
        self._formula = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if text_value is not None:
            self.text_value = text_value
        if cell_identifier is not None:
            self.cell_identifier = cell_identifier
        if style_index is not None:
            self.style_index = style_index
        if formula is not None:
            self.formula = formula

    @property
    def path(self):
        """Gets the path of this XlsxSpreadsheetCell.  # noqa: E501

        The Path of the location of this object; leave blank for new rows  # noqa: E501

        :return: The path of this XlsxSpreadsheetCell.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this XlsxSpreadsheetCell.

        The Path of the location of this object; leave blank for new rows  # noqa: E501

        :param path: The path of this XlsxSpreadsheetCell.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def text_value(self):
        """Gets the text_value of this XlsxSpreadsheetCell.  # noqa: E501

        Text value of the cell  # noqa: E501

        :return: The text_value of this XlsxSpreadsheetCell.  # noqa: E501
        :rtype: str
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """Sets the text_value of this XlsxSpreadsheetCell.

        Text value of the cell  # noqa: E501

        :param text_value: The text_value of this XlsxSpreadsheetCell.  # noqa: E501
        :type: str
        """

        self._text_value = text_value

    @property
    def cell_identifier(self):
        """Gets the cell_identifier of this XlsxSpreadsheetCell.  # noqa: E501

        Cell reference of the cell, e.g. A1, Z22, etc.  # noqa: E501

        :return: The cell_identifier of this XlsxSpreadsheetCell.  # noqa: E501
        :rtype: str
        """
        return self._cell_identifier

    @cell_identifier.setter
    def cell_identifier(self, cell_identifier):
        """Sets the cell_identifier of this XlsxSpreadsheetCell.

        Cell reference of the cell, e.g. A1, Z22, etc.  # noqa: E501

        :param cell_identifier: The cell_identifier of this XlsxSpreadsheetCell.  # noqa: E501
        :type: str
        """

        self._cell_identifier = cell_identifier

    @property
    def style_index(self):
        """Gets the style_index of this XlsxSpreadsheetCell.  # noqa: E501

        Identifier for the style to apply to this style  # noqa: E501

        :return: The style_index of this XlsxSpreadsheetCell.  # noqa: E501
        :rtype: int
        """
        return self._style_index

    @style_index.setter
    def style_index(self, style_index):
        """Sets the style_index of this XlsxSpreadsheetCell.

        Identifier for the style to apply to this style  # noqa: E501

        :param style_index: The style_index of this XlsxSpreadsheetCell.  # noqa: E501
        :type: int
        """

        self._style_index = style_index

    @property
    def formula(self):
        """Gets the formula of this XlsxSpreadsheetCell.  # noqa: E501


        :return: The formula of this XlsxSpreadsheetCell.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this XlsxSpreadsheetCell.


        :param formula: The formula of this XlsxSpreadsheetCell.  # noqa: E501
        :type: str
        """

        self._formula = formula

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XlsxSpreadsheetCell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XlsxSpreadsheetCell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
