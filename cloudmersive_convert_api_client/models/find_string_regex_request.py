# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FindStringRegexRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text_content': 'str',
        'target_regex': 'str',
        'match_case': 'bool'
    }

    attribute_map = {
        'text_content': 'TextContent',
        'target_regex': 'TargetRegex',
        'match_case': 'MatchCase'
    }

    def __init__(self, text_content=None, target_regex=None, match_case=None):  # noqa: E501
        """FindStringRegexRequest - a model defined in Swagger"""  # noqa: E501

        self._text_content = None
        self._target_regex = None
        self._match_case = None
        self.discriminator = None

        if text_content is not None:
            self.text_content = text_content
        if target_regex is not None:
            self.target_regex = target_regex
        if match_case is not None:
            self.match_case = match_case

    @property
    def text_content(self):
        """Gets the text_content of this FindStringRegexRequest.  # noqa: E501

        Input text content  # noqa: E501

        :return: The text_content of this FindStringRegexRequest.  # noqa: E501
        :rtype: str
        """
        return self._text_content

    @text_content.setter
    def text_content(self, text_content):
        """Sets the text_content of this FindStringRegexRequest.

        Input text content  # noqa: E501

        :param text_content: The text_content of this FindStringRegexRequest.  # noqa: E501
        :type: str
        """

        self._text_content = text_content

    @property
    def target_regex(self):
        """Gets the target_regex of this FindStringRegexRequest.  # noqa: E501

        Target input regular expression (regex) to find  # noqa: E501

        :return: The target_regex of this FindStringRegexRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_regex

    @target_regex.setter
    def target_regex(self, target_regex):
        """Sets the target_regex of this FindStringRegexRequest.

        Target input regular expression (regex) to find  # noqa: E501

        :param target_regex: The target_regex of this FindStringRegexRequest.  # noqa: E501
        :type: str
        """

        self._target_regex = target_regex

    @property
    def match_case(self):
        """Gets the match_case of this FindStringRegexRequest.  # noqa: E501

        Set to True to match case, False to ignore case  # noqa: E501

        :return: The match_case of this FindStringRegexRequest.  # noqa: E501
        :rtype: bool
        """
        return self._match_case

    @match_case.setter
    def match_case(self, match_case):
        """Sets the match_case of this FindStringRegexRequest.

        Set to True to match case, False to ignore case  # noqa: E501

        :param match_case: The match_case of this FindStringRegexRequest.  # noqa: E501
        :type: bool
        """

        self._match_case = match_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindStringRegexRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindStringRegexRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
