# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_file_name': 'str',
        'document_content': 'str'
    }

    attribute_map = {
        'document_file_name': 'DocumentFileName',
        'document_content': 'DocumentContent'
    }

    def __init__(self, document_file_name=None, document_content=None):  # noqa: E501
        """DocumentItem - a model defined in Swagger"""  # noqa: E501

        self._document_file_name = None
        self._document_content = None
        self.discriminator = None

        if document_file_name is not None:
            self.document_file_name = document_file_name
        if document_content is not None:
            self.document_content = document_content

    @property
    def document_file_name(self):
        """Gets the document_file_name of this DocumentItem.  # noqa: E501

        File name of the document  # noqa: E501

        :return: The document_file_name of this DocumentItem.  # noqa: E501
        :rtype: str
        """
        return self._document_file_name

    @document_file_name.setter
    def document_file_name(self, document_file_name):
        """Sets the document_file_name of this DocumentItem.

        File name of the document  # noqa: E501

        :param document_file_name: The document_file_name of this DocumentItem.  # noqa: E501
        :type: str
        """

        self._document_file_name = document_file_name

    @property
    def document_content(self):
        """Gets the document_content of this DocumentItem.  # noqa: E501

        Contents of the document as a binary byte array  # noqa: E501

        :return: The document_content of this DocumentItem.  # noqa: E501
        :rtype: str
        """
        return self._document_content

    @document_content.setter
    def document_content(self, document_content):
        """Sets the document_content of this DocumentItem.

        Contents of the document as a binary byte array  # noqa: E501

        :param document_content: The document_content of this DocumentItem.  # noqa: E501
        :type: str
        """
        if document_content is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', document_content):  # noqa: E501
            raise ValueError(r"Invalid value for `document_content`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._document_content = document_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
