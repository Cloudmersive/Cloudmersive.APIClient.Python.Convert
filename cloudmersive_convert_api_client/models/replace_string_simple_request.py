# coding: utf-8

"""
    convertapi

    Convert API lets you effortlessly convert file formats and types.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReplaceStringSimpleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text_content': 'str',
        'target_string': 'str',
        'replace_with_string': 'str'
    }

    attribute_map = {
        'text_content': 'TextContent',
        'target_string': 'TargetString',
        'replace_with_string': 'ReplaceWithString'
    }

    def __init__(self, text_content=None, target_string=None, replace_with_string=None):  # noqa: E501
        """ReplaceStringSimpleRequest - a model defined in Swagger"""  # noqa: E501

        self._text_content = None
        self._target_string = None
        self._replace_with_string = None
        self.discriminator = None

        if text_content is not None:
            self.text_content = text_content
        if target_string is not None:
            self.target_string = target_string
        if replace_with_string is not None:
            self.replace_with_string = replace_with_string

    @property
    def text_content(self):
        """Gets the text_content of this ReplaceStringSimpleRequest.  # noqa: E501

        Input text content  # noqa: E501

        :return: The text_content of this ReplaceStringSimpleRequest.  # noqa: E501
        :rtype: str
        """
        return self._text_content

    @text_content.setter
    def text_content(self, text_content):
        """Sets the text_content of this ReplaceStringSimpleRequest.

        Input text content  # noqa: E501

        :param text_content: The text_content of this ReplaceStringSimpleRequest.  # noqa: E501
        :type: str
        """

        self._text_content = text_content

    @property
    def target_string(self):
        """Gets the target_string of this ReplaceStringSimpleRequest.  # noqa: E501

        Target input string to match and be replaced  # noqa: E501

        :return: The target_string of this ReplaceStringSimpleRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_string

    @target_string.setter
    def target_string(self, target_string):
        """Sets the target_string of this ReplaceStringSimpleRequest.

        Target input string to match and be replaced  # noqa: E501

        :param target_string: The target_string of this ReplaceStringSimpleRequest.  # noqa: E501
        :type: str
        """

        self._target_string = target_string

    @property
    def replace_with_string(self):
        """Gets the replace_with_string of this ReplaceStringSimpleRequest.  # noqa: E501

        Replacement for target string  # noqa: E501

        :return: The replace_with_string of this ReplaceStringSimpleRequest.  # noqa: E501
        :rtype: str
        """
        return self._replace_with_string

    @replace_with_string.setter
    def replace_with_string(self, replace_with_string):
        """Sets the replace_with_string of this ReplaceStringSimpleRequest.

        Replacement for target string  # noqa: E501

        :param replace_with_string: The replace_with_string of this ReplaceStringSimpleRequest.  # noqa: E501
        :type: str
        """

        self._replace_with_string = replace_with_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplaceStringSimpleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplaceStringSimpleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
